import time

def retrythecode(f):

    def wrapped(browser, url):

        """
        Inputs  : browser object and url to fetch.
        Does    : Its a Decorator function which adds a surrounding retry code to a browser fetching a page.
                  It is required as Servers tend to throw errors randomly. It tries to fetch the given url 10 times.
                  Since I have to do this many times, I wrote a decorator to keep code clean.
        Returns : Result from the browser
        """


       #Keep trying unless you get the link to open - beta code, not sure if i should do this
        connected = False
        errval = 0
        while not connected:
            try:

                errval +=1
                return f(browser, url)        

            except :

                time.sleep(5)

                #For debugging
                print "=====" * 30
                print "Trying to fetch Again " + url
                print " count = " + str(errval)
                print "=====" * 30

                if errval == 10:
                    break;


    return wrapped

@retrythecode
def openlink(browser, url):

    """
    Inputs  : Browser object, url to fetch.
    Does    : This is the code which is being wrapped around retrythecode decorator.
    Returns : Result from browser.
    """

    res = browser.open(url)
    return res


